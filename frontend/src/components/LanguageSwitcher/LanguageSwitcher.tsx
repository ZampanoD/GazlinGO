//–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞ –∏ —Ñ–ª–∞–≥–æ–≤ —Å—Ç—Ä–∞–Ω.
//–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —è–∑—ã–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.

import { useState } from 'react';
import { useLanguage } from '../../contexts/LanguageContext';
import type { Languages } from '../../contexts/LanguageContext'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–∞

interface Language {
    code: Languages;
    name: string;
    flag: string;
}

const availableLanguages: Language[] = [
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'en', name: 'English', flag: 'üá¨üáß' },
    { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
    { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
];

export const LanguageSwitcher = () => {
    const [isLoading, setIsLoading] = useState(false);
    const { currentLanguage, setLanguage } = useLanguage();


    const handleLanguageChange = async (langCode: Languages) => { // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        setIsLoading(true);
        try {
            await setLanguage(langCode);


        } catch (error) {
            console.error('Error changing language:', error);

        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="relative inline-block">
            <select
                value={currentLanguage}
                onChange={(e) => handleLanguageChange(e.target.value as Languages)} // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
                disabled={isLoading}
                className={`
                    appearance-none bg-white
                    border border-gray-300 rounded-lg
                    pl-4 pr-10 py-2
                    focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
                    cursor-pointer
                    disabled:opacity-50 disabled:cursor-not-allowed
                    transition-colors duration-200
                `}
            >
                {availableLanguages.map((lang) => (
                    <option key={lang.code} value={lang.code}>
                        {`${lang.flag} ${lang.name}`}
                    </option>
                ))}
            </select>

            {isLoading && (
                <div className="absolute right-10 top-1/2 transform -translate-y-1/2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
                </div>
            )}

            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"/>
                </svg>
            </div>
        </div>
    );
};

export default LanguageSwitcher;